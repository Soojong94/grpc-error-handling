import time
import grpc
from concurrent import futures
import threading
import sys
import os

# 프로젝트 루트 디렉토리를 sys.path에 추가
sys.path.insert(0, os.path.abspath(os.path.dirname(os.path.dirname(__file__))))

from generated import backend_pb2, backend_pb2_grpc, db_pb2, db_pb2_grpc
from common.logging_config import setup_logging
from common.circuit_breaker import CircuitBreaker
from common.backpressure import BackpressureController
from common.deadline import DeadlineHandler

class BaseBackendServicer(backend_pb2_grpc.BackendServiceServicer):
    def __init__(self, service_name, port=50052, use_circuit_breaker=False, use_deadline=False, use_backpressure=False):
        self.service_name = service_name
        self.port = port
        self.logger = setup_logging(service_name)
        
        # 기본 패턴 활성화 설정
        self.default_use_circuit_breaker = use_circuit_breaker
        self.default_use_deadline = use_deadline
        self.default_use_backpressure = use_backpressure
        
        # 환경 변수에서 설정 가져오기
        fail_threshold = int(os.environ.get('CIRCUIT_BREAKER_FAIL_THRESHOLD', '3'))
        reset_timeout = int(os.environ.get('CIRCUIT_BREAKER_RESET_TIMEOUT', '10'))
        backpressure_window = int(os.environ.get('BACKPRESSURE_WINDOW', '5'))
        backpressure_max_requests = int(os.environ.get('BACKPRESSURE_MAX_REQUESTS', '30'))
        backpressure_max_concurrency = int(os.environ.get('BACKPRESSURE_MAX_CONCURRENCY', '8'))
        deadline_timeout = float(os.environ.get('DEADLINE_TIMEOUT', '0.5'))
        
        # 에러 처리 패턴 초기화
        self.circuit_breaker = CircuitBreaker(
            fail_threshold=fail_threshold,
            reset_timeout=reset_timeout,
            name=f"{service_name}_to_db"
        )
        self.backpressure = BackpressureController(
            window_size=backpressure_window,
            max_requests=backpressure_max_requests,
            max_concurrency=backpressure_max_concurrency,
            name=service_name
        )
        self.deadline_handler = DeadlineHandler(
            timeout_seconds=deadline_timeout,
            name=f"{service_name}_to_db"
        )
        
        # DB 서비스 주소 (환경 변수에서 읽기)
        self.db_address = os.environ.get('DB_SERVICE_ADDRESS', 'localhost:50057')
        self.logger.info(f"[{service_name}] 초기화 - DB 주소: {self.db_address}")
        self.logger.info(f"[{service_name}] 초기화 - 패턴 설정: 서킷브레이커={use_circuit_breaker}, 데드라인={use_deadline}, 백프레셔={use_backpressure}")
    
    # 나머지 코드는 그대로...
    # 나머지 메서드들은 그대로 유지...

def run_server(service_name, port, use_circuit_breaker=False, use_deadline=False, use_backpressure=False):
    logger = setup_logging(f"{service_name}_server")
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    
    # 환경 변수에서 포트 설정 가져오기 (지정된 값이 있으면 우선 사용)
    port = int(os.environ.get('PORT', port))
    
    backend_pb2_grpc.add_BackendServiceServicer_to_server(
        BaseBackendServicer(
            service_name=service_name,
            port=port,
            use_circuit_breaker=use_circuit_breaker,
            use_deadline=use_deadline,
            use_backpressure=use_backpressure
        ), 
        server
    )
    
    server.add_insecure_port(f'[::]:{port}')
    server.start()
    logger.info(f"{service_name} 서비스 시작됨: 포트 {port}")
    
    try:
        server.wait_for_termination()
    except KeyboardInterrupt:
        logger.info(f"{service_name} 서비스 종료 중...")
        server.stop(0)
