apiVersion: apps/v1
kind: Deployment
metadata:
  name: bff-service
  namespace: grpc-error-handling
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bff-service
  template:
    metadata:
      labels:
        app: bff-service
    spec:
      containers:
      - name: bff-service
        image: grpc-error-handling-bff:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: BACKEND_NO_PATTERN_ADDRESS
          value: "backend-no-pattern:50052"
        - name: BACKEND_CIRCUIT_BREAKER_ADDRESS
          value: "backend-circuit-breaker:50053"
        - name: BACKEND_DEADLINE_ADDRESS
          value: "backend-deadline:50054"
        - name: BACKEND_BACKPRESSURE_ADDRESS
          value: "backend-backpressure:50055"
        - name: BACKEND_ALL_PATTERNS_ADDRESS
          value: "backend-all:50056"
        - name: CIRCUIT_BREAKER_FAIL_THRESHOLD
          value: "3"
        - name: CIRCUIT_BREAKER_RESET_TIMEOUT
          value: "10"
        - name: DEADLINE_TIMEOUT
          value: "1.0"
        - name: BACKPRESSURE_WINDOW
          value: "5"
        - name: BACKPRESSURE_MAX_REQUESTS
          value: "30"
        - name: BACKPRESSURE_MAX_CONCURRENCY
          value: "8"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          exec:
            command: ["python", "-c", "import grpc; channel = grpc.insecure_channel('localhost:50051'); stub = grpc.health.v1.health_pb2_grpc.HealthStub(channel); stub.Check(grpc.health.v1.health_pb2.HealthCheckRequest())"]
          initialDelaySeconds: 10
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: bff-service
  namespace: grpc-error-handling
spec:
  selector:
    app: bff-service
  ports:
  - port: 50051
    targetPort: 50051
  type: ClusterIP